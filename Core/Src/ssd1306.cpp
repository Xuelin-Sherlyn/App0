#include "ssd1306.hpp"
#include "stm32h7xx_hal_def.h"
#include "stm32h7xx_hal_i2c.h"
#include <cstdint>
#include <cstdlib>
#include <string.h>

SSD1306::SSD1306(I2C_HandleTypeDef* hi2cHandle) : hi2c(hi2cHandle){}

/**
  * @brief  SSD1306 ASCII字库
  * @note   取模设置：点阵格式阴码，逐行式，取模走向顺向(高位在前)，C51格式，行前后缀无"{"和"}"
  */
static const uint8_t ascii_font_8x16[] = {
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",0*/

0x00,0x00,0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00,/*"!",1*/

0x00,0x12,0x24,0x24,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*""",2*/

0x00,0x00,0x00,0x12,0x12,0x12,0x7E,0x24,0x24,0x24,0x7E,0x24,0x24,0x24,0x00,0x00,/*"#",3*/

0x00,0x00,0x08,0x3C,0x4A,0x4A,0x48,0x38,0x0C,0x0A,0x0A,0x4A,0x4A,0x3C,0x08,0x08,/*"$",4*/

0x00,0x00,0x00,0x44,0xA4,0xA8,0xA8,0xB0,0x54,0x1A,0x2A,0x2A,0x4A,0x44,0x00,0x00,/*"%",5*/

0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x50,0x6E,0xA4,0x94,0x98,0x89,0x76,0x00,0x00,/*"&",6*/

0x00,0x60,0x20,0x20,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"'",7*/

0x00,0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00,/*"(",8*/

0x00,0x40,0x20,0x10,0x10,0x08,0x08,0x08,0x08,0x08,0x08,0x10,0x10,0x20,0x40,0x00,/*")",9*/

0x00,0x00,0x00,0x00,0x10,0x10,0xD6,0x38,0x38,0xD6,0x10,0x10,0x00,0x00,0x00,0x00,/*"*",10*/

0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x08,0x7F,0x08,0x08,0x08,0x00,0x00,0x00,0x00,/*"+",11*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x20,0x20,0x40,/*",",12*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"-",13*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00,0x00,/*".",14*/

0x00,0x00,0x02,0x04,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x20,0x20,0x40,0x40,0x00,/*"/",15*/

0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00,/*"0",16*/

0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00,/*"1",17*/

0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00,/*"2",18*/

0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00,/*"3",19*/

0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24,0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00,/*"4",20*/

0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78,0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00,/*"5",21*/

0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00,/*"6",22*/

0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00,/*"7",23*/

0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00,/*"8",24*/

0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00,/*"9",25*/

0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,/*":",26*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10,/*";",27*/

0x00,0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x02,0x00,0x00,/*"<",28*/

0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,/*"=",29*/

0x00,0x00,0x00,0x40,0x20,0x10,0x08,0x04,0x02,0x04,0x08,0x10,0x20,0x40,0x00,0x00,/*">",30*/

0x00,0x00,0x00,0x3C,0x42,0x42,0x62,0x04,0x08,0x08,0x08,0x00,0x18,0x18,0x00,0x00,/*"?",31*/

0x00,0x00,0x00,0x38,0x44,0x5A,0xAA,0xAA,0xAA,0xAA,0xAA,0x5C,0x42,0x3C,0x00,0x00,/*"@",32*/

0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28,0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00,/*"A",33*/

0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00,/*"B",34*/

0x00,0x00,0x00,0x3E,0x42,0x42,0x80,0x80,0x80,0x80,0x80,0x42,0x44,0x38,0x00,0x00,/*"C",35*/

0x00,0x00,0x00,0xF8,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0xF8,0x00,0x00,/*"D",36*/

0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x42,0x42,0xFC,0x00,0x00,/*"E",37*/

0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x40,0x40,0xE0,0x00,0x00,/*"F",38*/

0x00,0x00,0x00,0x3C,0x44,0x44,0x80,0x80,0x80,0x8E,0x84,0x44,0x44,0x38,0x00,0x00,/*"G",39*/

0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*"H",40*/

0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,/*"I",41*/

0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88,0xF0,/*"J",42*/

0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x50,0x48,0x48,0x44,0x44,0xEE,0x00,0x00,/*"K",43*/

0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0xFE,0x00,0x00,/*"L",44*/

0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00,/*"M",45*/

0x00,0x00,0x00,0xC7,0x62,0x62,0x52,0x52,0x4A,0x4A,0x4A,0x46,0x46,0xE2,0x00,0x00,/*"N",46*/

0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00,/*"O",47*/

0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0xE0,0x00,0x00,/*"P",48*/

0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0xB2,0x4C,0x38,0x06,0x00,/*"Q",49*/

0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x7C,0x48,0x48,0x44,0x44,0x42,0xE3,0x00,0x00,/*"R",50*/

0x00,0x00,0x00,0x3E,0x42,0x42,0x40,0x20,0x18,0x04,0x02,0x42,0x42,0x7C,0x00,0x00,/*"S",51*/

0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,/*"T",52*/

0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,/*"U",53*/

0x00,0x00,0x00,0xE7,0x42,0x42,0x44,0x24,0x24,0x28,0x28,0x18,0x10,0x10,0x00,0x00,/*"V",54*/

0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x28,0x00,0x00,/*"W",55*/

0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00,/*"X",56*/

0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00,/*"Y",57*/

0x00,0x00,0x00,0x7E,0x84,0x04,0x08,0x08,0x10,0x20,0x20,0x42,0x42,0xFC,0x00,0x00,/*"Z",58*/

0x00,0x1E,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x1E,0x00,/*"[",59*/

0x00,0x00,0x40,0x20,0x20,0x20,0x10,0x10,0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02,/*"\",60*/

0x00,0x78,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x78,0x00,/*"]",61*/

0x00,0x18,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"^",62*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,/*"_",63*/

0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"`",64*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x0C,0x34,0x44,0x4C,0x36,0x00,0x00,/*"a",65*/

0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x00,0x00,/*"b",66*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x40,0x40,0x40,0x22,0x1C,0x00,0x00,/*"c",67*/

0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00,/*"d",68*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x42,0x3C,0x00,0x00,/*"e",69*/

0x00,0x00,0x00,0x00,0x0C,0x12,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,/*"f",70*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C,/*"g",71*/

0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*"h",72*/

0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,/*"i",73*/

0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x78,/*"j",74*/

0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x4E,0x48,0x50,0x70,0x48,0x44,0xEE,0x00,0x00,/*"k",75*/

0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00,/*"l",76*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x49,0x49,0x49,0x49,0x49,0xED,0x00,0x00,/*"m",77*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00,/*"n",78*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00,/*"o",79*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0,/*"p",80*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07,/*"q",81*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x32,0x20,0x20,0x20,0x20,0xF8,0x00,0x00,/*"r",82*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x42,0x40,0x3C,0x02,0x42,0x7C,0x00,0x00,/*"s",83*/

0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x12,0x0C,0x00,0x00,/*"t",84*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00,/*"u",85*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00,/*"v",86*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x89,0x4A,0x5A,0x54,0x24,0x24,0x00,0x00,/*"w",87*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00,/*"x",88*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x10,0x10,0x60,/*"y",89*/

0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x44,0x08,0x10,0x10,0x22,0x7E,0x00,0x00,/*"z",90*/

0x00,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x04,0x04,0x04,0x04,0x04,0x03,0x00,/*"{",91*/

0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,/*"|",92*/

0x00,0xC0,0x20,0x20,0x20,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x20,0xC0,0x00,/*"}",93*/

0x20,0x5A,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"~",94*/
};

/**
  * @brief  SSD1306初始化函数
  * @retval HAL状态
  */
HAL_StatusTypeDef SSD1306::SSD1306_Init(void) {
    uint8_t init_cmds[] = {
    0xAE,           // 关闭显示
    0xD5, 0x80, // 设置显示时钟分频/振荡器频率
    0xA8, 0x3F, // 设置多路复用率（1/64）
    0xD3, 0x00, // 设置显示偏移
    0x40,           // 设置显示起始行
    0x8D, 0x14, // 启用电荷泵
    0x20, 0x00, // 设置内存模式（水平寻址）
    0xA1,       // 段重映射（SEG0->SEG127）
    0xC8,       // 扫描方向（COM0->COM63）
    0xDA, 0x12, // COM引脚硬件配置
    0x81, 0xCF, // 设置对比度
    0xD9, 0xF1, // 设置预充电周期
    0xDB, 0x40, // 设置VCOMH电平
    0xA4,       // 全部像素点亮（禁用）
    0xA6,       // 正常显示（非反色）
    0xAF        // 开启显示
    };
    return SSD1306_WriteCommands(init_cmds, sizeof(init_cmds));
}

/**
  * @brief  向SSD1306写入单个命令
  * @param  command: 要写入的命令字节
  * @retval HAL状态
  */
HAL_StatusTypeDef SSD1306::SSD1306_WriteCommand(uint8_t command) {
    uint8_t buf[2] = {SSD1306_CTRL_CMD, command};
    return HAL_I2C_Master_Transmit(hi2c, SSD1306_I2C_ADDR << 1, buf, sizeof(buf), HAL_MAX_DELAY);
}

/**
  * @brief  向SSD1306写入多个命令
  * @param  commands: 命令数组指针
  * @param  len: 命令数量
  * @retval HAL状态
  */
HAL_StatusTypeDef SSD1306::SSD1306_WriteCommands(uint8_t *commands, uint16_t len) {
        // 显式类型转换解决编译错误
    uint8_t *buf = (uint8_t*)malloc(len + 1);
    if (buf == NULL) return HAL_ERROR;
    
    buf[0] = SSD1306_CTRL_CMD;
    memcpy(buf + 1, commands, len);
    
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, SSD1306_I2C_ADDR << 1, buf, len + 1, HAL_MAX_DELAY);
    free(buf);
    return status;
}

/**
  * @brief  向SSD1306写入数据
  * @param  data: 数据数组指针
  * @param  len: 数据长度
  * @retval HAL状态
  */
HAL_StatusTypeDef SSD1306::SSD1306_WriteData(uint8_t *data, uint16_t len) {
    uint8_t *buf = (uint8_t*)malloc(len + 1);
    if (buf == NULL) return HAL_ERROR;
    
    buf[0] = SSD1306_CTRL_DATA;
    memcpy(buf + 1, data, len);
    
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(hi2c, SSD1306_I2C_ADDR << 1, buf, len + 1, HAL_MAX_DELAY);
    free(buf);
    return status;    
}

/**
  * @brief  设置显示区域
  * @param  x: 起始列 (0-127)
  * @param  y: 起始页 (0-7)
  * @param  w: 宽度
  * @param  h: 高度(页数)
  * @retval HAL状态
  */
HAL_StatusTypeDef SSD1306::SSD1306_SetDisplayArea(uint8_t x, uint8_t y, uint8_t w, uint8_t h)
{
    uint8_t cmds[] = {
        0x21, // 设置列地址
        x,    // 起始列
        static_cast<uint8_t>(x + w - 1), // 结束列
        0x22, // 设置页地址
        y,    // 起始页
        static_cast<uint8_t>(y + h - 1)  // 结束页
    };
    return SSD1306_WriteCommands(cmds, sizeof(cmds));
}

/**
  * @brief  清除显示缓冲区
  */
void SSD1306::SSD1306_ClearBuffer(void)
{
    memset(SSD1306_Buffer, 0, sizeof(SSD1306_Buffer));
}

/**
  * @brief  更新屏幕显示
  */
void SSD1306::SSD1306_UpdateScreen(void)
{
    SSD1306_SetDisplayArea(0, 0, SSD1306_WIDTH, SSD1306_PAGES);
    SSD1306_WriteData(SSD1306_Buffer, sizeof(SSD1306_Buffer));
}

/**
  * @brief  在缓冲区中绘制一个像素
  * @param  x: X坐标 (0-127)
  * @param  y: Y坐标 (0-63)
  * @param  color: 颜色 (0:清除, 1:设置)
  */
void SSD1306::SSD1306_DrawPixel(uint8_t x, uint8_t y, uint8_t color)
{
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) return;
    
    if (color) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= (1 << (y % 8));
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
    }
}

/**
  * @brief  绘制水平线
  * @param  x: 起始X坐标
  * @param  y: Y坐标
  * @param  w: 宽度
  * @param  color: 颜色
  */
void SSD1306::SSD1306_DrawHLine(uint8_t x, uint8_t y, uint8_t w, uint8_t color)
{
    for (uint8_t i = 0; i < w; i++) {
        SSD1306_DrawPixel(x + i, y, color);
    }
}

/**
  * @brief  绘制垂直线
  * @param  x: X坐标
  * @param  y: 起始Y坐标
  * @param  h: 高度
  * @param  color: 颜色
  */
void SSD1306::SSD1306_DrawVLine(uint8_t x, uint8_t y, uint8_t h, uint8_t color)
{
    for (uint8_t i = 0; i < h; i++) {
        SSD1306_DrawPixel(x, y + i, color);
    }
}

/**
  * @brief  绘制矩形
  * @param  x: 起始X坐标
  * @param  y: 起始Y坐标
  * @param  w: 宽度
  * @param  h: 高度
  * @param  color: 颜色
  */
void SSD1306::SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    SSD1306_DrawHLine(x, y, w, color);
    SSD1306_DrawHLine(x, y + h - 1, w, color);
    SSD1306_DrawVLine(x, y, h, color);
    SSD1306_DrawVLine(x + w - 1, y, h, color);
}

/**
  * @brief  绘制实心矩形
  * @param  x: 起始X坐标
  * @param  y: 起始极市 Y坐标
  * @param  w: 宽度
  * @param  h: 高度
  * @极市 param  color: 颜色
  */
void SSD1306::SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t color)
{
    for (uint8_t i = 0; i < h; i++) {
        SSD1306_DrawHLine(x, y + i, w, color);
    }
}

/**
  * @brief  绘制一个字符
  * @param  x: X坐标
  * @param  y: Y坐标 (页模式，0-7)
  * @param  ch: 要绘制的字符
  * @param  color: 颜色 (0:清除, 1:设置)
  */
void SSD1306::SSD1306_DrawChar(uint8_t x, uint8_t y, char ch, uint8_t color)
{
    // 只处理可打印字符
    if (ch < 32 || ch > 127) return;
    
    // 获取字符在字体数组中的位置
    uint16_t c = (ch - 32) * 16; // 每个字符16字节
    
    // 绘制字符 (假设字体数据是横向逐行存储)
    for (uint8_t row = 0; row < 16; row++) {
        uint8_t line = ascii_font_8x16[c + row]; // 获取当前行的像素数据
        
        for (uint8_t col = 0; col < 8; col++) {
            if (line & (1 << (7 - col))) { // 检查每一位
                SSD1306_DrawPixel(x + col, y * 8 + row, color);
            }
        }
    }
}

/**
  * @brief  绘制字符串
  * @param  x: 起始X坐标
  * @param  y: 起始Y坐标 (页模式，0-7)
  * @param  str: 要绘制的字符串
  * @param  size: 字体大小 (1-3)
  * @param  color: 颜色 (0:清除, 1:设置)
  */
void SSD1306::SSD1306_DrawString(uint8_t x, uint8_t y, const char* str, uint8_t color)
{
    uint8_t pos = x;
    while (*str) {
        SSD1306_DrawChar(pos, y, *str++, color);
        pos += 9; // 字符宽度(8像素) + 间距(1像素)
        if (pos + 8 > SSD1306_WIDTH) break; // 防止溢出屏幕
    }
}